generator client {
  provider = "prisma-client-js"
  output   = "../prisma/generated/client"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model FunctionalityType {
  id     String  @id @default(uuid()) @db.Uuid
  active Boolean @default(true)

  created_at DateTime  @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  description String?
  name        String

  functionalities Functionality[]
}

model Functionality {
  id     String  @id @default(uuid()) @db.Uuid
  active Boolean @default(true)

  created_at DateTime  @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  description String?
  name        String
  path        String?

  functionalityTypeId String            @db.Uuid
  functionalityType   FunctionalityType @relation(fields: [functionalityTypeId], references: [id])

  userPermissions UserPermission[]

  profilePermissions ProfilePermission[]
}

model UserPermission {
  id     String  @id @default(uuid()) @db.Uuid
  active Boolean @default(true)

  created_at DateTime  @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  allow Boolean @default(false)

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  functionalityId String        @db.Uuid
  functionality   Functionality @relation(fields: [functionalityId], references: [id])
}

model ProfilePermission {
  id     String  @id @default(uuid()) @db.Uuid
  active Boolean @default(true)

  created_at DateTime  @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  allow Boolean @default(false)

  profileId String  @db.Uuid
  profile   Profile @relation(fields: [profileId], references: [id])

  functionalityId String        @db.Uuid
  functionality   Functionality @relation(fields: [functionalityId], references: [id])
}

model Profile {
  id     String  @id @default(uuid()) @db.Uuid
  active Boolean @default(true)

  created_at DateTime  @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  name        String
  description String?

  permissions  ProfilePermission[]
  users        UserProfile[]
  applications Application[]       @relation("ApplicationProfile")
}

model Application {
  id     String  @id @default(uuid()) @db.Uuid
  active Boolean @default(true)

  created_at DateTime  @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  name        String
  description String?

  profile Profile[] @relation("ApplicationProfile")
  users   User[]    @relation("UserApplication")
}

model User {
  id     String  @id @default(uuid()) @db.Uuid
  active Boolean @default(true)

  created_at DateTime  @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  username String
  password String

  permissions UserPermission[]

  profiles     UserProfile[]
  applications Application[] @relation("UserApplication")
}

model UserProfile {
  id     String  @id @default(uuid()) @db.Uuid
  active Boolean @default(true)

  created_at DateTime  @default(now())
  updated_at DateTime?
  deleted_at DateTime?

  profileId String  @db.Uuid
  profile   Profile @relation(fields: [profileId], references: [id])

  userId String @db.Uuid
  user   User   @relation(fields: [userId], references: [id])
}
